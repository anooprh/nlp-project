package rae;

import java.io.FileInputStream;
import java.io.ObjectInputStream;

import junit.framework.Assert;

import math.DifferentiableMatrixFunction;
import math.DoubleArrays;
import math.Norm1Tanh;

import org.junit.Test;

import classify.ReviewDatum;

public class RAEFeatureExtractorTest {

	RAEFeatureExtractor FeatureExtractor;
	
	public RAEFeatureExtractorTest() throws Exception
	{
		String dir = "data/parsed/"; //ssanjeev
		int EmbeddingSize = 50, CatSize = 1, DictionarySize = 14043; 
		double AlphaCat = 0.2, Beta = 0.5;
		
		FileInputStream fis = new FileInputStream(dir + "/opttheta.dat");
		ObjectInputStream ois = new ObjectInputStream(fis);
		FineTunableTheta tunedTheta = (FineTunableTheta) ois.readObject();
		ois.close();
		
		DifferentiableMatrixFunction f = new Norm1Tanh(); 
		FeatureExtractor = new RAEFeatureExtractor(EmbeddingSize, tunedTheta, AlphaCat, Beta, CatSize, DictionarySize, f);
	}

	public void test(int[] indices, double[] expected_result)
	{
		ReviewDatum d = new ReviewDatum(new String[]{"0"}, 1, 1, indices);
		double[] result = FeatureExtractor.extractFeatures(d);
		double[] diff = DoubleArrays.subtract(result, expected_result);
		double totalDiff = 0;
		for(int i=0; i<diff.length;i++)
			totalDiff += Math.abs(diff[i]);
		
		System.out.println(totalDiff);
		Assert.assertTrue( totalDiff < 1e-4 );
	}
	
	@Test
	public void test1() 
	{
		int[] indices = { 1, 2984, 15, 4078, 4, 18, 1, 3059, 1164, 12, 52, 13,0, 13, 8, 14, 30, 12, 242, 4, 146, 7, 7573, 265, 907, 62, 0, 0,2, 0, 2288, 0, 55, 0, 0, 3 };
		double[] expected_result = { -0.200696, -0.093882, -0.093973, -0.005737, 0.199489, -0.102249, -0.052196, -0.210573, -0.206819, -0.166601, -0.156270, 0.201899, -0.128729, 0.015258, 0.116101, 0.178994, -0.204784, -0.064397, 0.207246, 0.048121, 0.047828, -0.020076, 0.137762, 0.206115, 0.155090, -0.163909, 0.000797, 0.003892, -0.011571, 0.175466, 0.163364, -0.175643, -0.206109, 0.210959, 0.167104, 0.124826, 0.057094, -0.169117, 0.089584, 0.208301, -0.007427, -0.054040, 0.187749, 0.065048, 0.167780, 0.097817, 0.114126, -0.203841, -0.055478, -0.014155, -0.186867, -0.081680, -0.089519, 0.009584, 0.182573, -0.096950, -0.053815, -0.215591, -0.175220, -0.138895, -0.141565, 0.189245, -0.115809, 0.010565, 0.104396, 0.170229, -0.187384, -0.049483, 0.194890, 0.054669, 0.042802, -0.022701, 0.118793, 0.191896, 0.142339, -0.142771, 0.002504, 0.006076, -0.012951, 0.154473, 0.138466, -0.163395, -0.181318, 0.221575, 0.153750, 0.110837, 0.052269, -0.150747, 0.088376, 0.223059, 0.016183, -0.046526, 0.173256, 0.052360, 0.148334, 0.076131, 0.104957, -0.190598, -0.056498, -0.018663 };
		
		test(indices,expected_result);
	}

	@Test
	public void test2() 
	{
		int[] indices = { 1, 0, 2315, 2914, 5, 13, 1, 7718, 5, 1, 5743, 13,10718, 15, 141, 760, 14, 7, 3293, 5, 2245, 93, 25, 4236, 3922,0, 9725, 0, 12, 1999, 2973, 5, 0, 3, 12800, 3, 12800, 3, 0, 12,0, 3 };
		double[] expected_result = { -0.197586, -0.089335, -0.096506, -0.013606, 0.200413, -0.092453, -0.059427, -0.210027, -0.205999, -0.168941, -0.157756, 0.201195, -0.134575, 0.025994, 0.119728, 0.175920, -0.202935, -0.068825, 0.206003, 0.070789, 0.068356, -0.026476, 0.136654, 0.204475, 0.153022, -0.166109, 0.002316, -0.013530, -0.008589, 0.174608, 0.164586, -0.170440, -0.205163, 0.210047, 0.164718, 0.125298, 0.057337, -0.168155, 0.093353, 0.207607, -0.009260, -0.061032, 0.186671, 0.058008, 0.165152, 0.107507, 0.113128, -0.201161, -0.044174, -0.033144, -0.172212, -0.060482, -0.086593, -0.001240, 0.164417, -0.086427, -0.041497, -0.194893, -0.173089, -0.137957, -0.133599, 0.177870, -0.107443, 0.001104, 0.101085, 0.145006, -0.163612, -0.049914, 0.169038, 0.050707, 0.047791, -0.026070, 0.107035, 0.191201, 0.135112, -0.129560, -0.010426, 0.005928, -0.013181, 0.149706, 0.129395, -0.163690, -0.191060, 0.213885, 0.136497, 0.107665, 0.043663, -0.132108, 0.091568, 0.205151, 0.013392, -0.057226, 0.154340, 0.057947, 0.132396, 0.075154, 0.092140, -0.160983, -0.048758, -0.007750 };
		test(indices,expected_result);
	}

	@Test
	public void test3() 
	{
		int[] indices = { 1087, 36, 0, 0 };
		double[] expected_result = { -0.200951, -0.083156, -0.046677, -0.007124, 0.205150, -0.082082, -0.051405, -0.219642, -0.212884, -0.169169, -0.147371, 0.211074, -0.109869, 0.008470, 0.122919, 0.179313, -0.213721, -0.094501, 0.216070, 0.073919, 0.036952, -0.022203, 0.135891, 0.215591, 0.165970, -0.133574, -0.012666, 0.017696, -0.027005, 0.160734, 0.144372, -0.171568, -0.208232, 0.221442, 0.163432, 0.111513, 0.015244, -0.163318, 0.099576, 0.217710, -0.004994, -0.058050, 0.184471, 0.084761, 0.157544, 0.087041, 0.126987, -0.209836, -0.044057, 0.004567, -0.183282, -0.094663, -0.089127, -0.018094, 0.194005, -0.070739, -0.071277, -0.212624, -0.171107, -0.140443, -0.141387, 0.175258, -0.107917, -0.005625, 0.113652, 0.193762, -0.174429, -0.054615, 0.199862, 0.066644, 0.043273, -0.001125, 0.089248, 0.233598, 0.143702, -0.166704, -0.005067, 0.010846, -0.006644, 0.169130, 0.118608, -0.161139, -0.199273, 0.221463, 0.164719, 0.103668, 0.041813, -0.124932, 0.091262, 0.227010, 0.004996, -0.030032, 0.152122, 0.066575, 0.123730, 0.084099, 0.134040, -0.215373, -0.050502, -0.012902 };
		test(indices,expected_result);
	}

	@Test
	public void test4() 
	{
		int[] indices = { 81, 273, 2178, 256, 4, 269, 4, 1, 4313, 4, 28, 5007,2, 0, 15, 7, 220, 352, 4, 285, 3 };
		double[] expected_result = { -0.198608, -0.086997, -0.100873, -0.019479, 0.200276, -0.097762, -0.047958, -0.211296, -0.208012, -0.158422, -0.150746, 0.201853, -0.130623, 0.020626, 0.117844, 0.176367, -0.205072, -0.074187, 0.207423, 0.059170, 0.066862, -0.003196, 0.140123, 0.207233, 0.163477, -0.162439, -0.002980, -0.015068, -0.016981, 0.180231, 0.163293, -0.177623, -0.206451, 0.212072, 0.166645, 0.125246, 0.040696, -0.166589, 0.089530, 0.209698, -0.005845, -0.052287, 0.186618, 0.065593, 0.165132, 0.101599, 0.100886, -0.202649, -0.051593, -0.013391, -0.190012, -0.086603, -0.090250, 0.005049, 0.176310, -0.099232, -0.048337, -0.223547, -0.184232, -0.151980, -0.146125, 0.201795, -0.122465, 0.021302, 0.100884, 0.172826, -0.186235, -0.060840, 0.184211, 0.054819, 0.052242, -0.013938, 0.122952, 0.206376, 0.146092, -0.146984, -0.006814, 0.011807, -0.008810, 0.160683, 0.139542, -0.169660, -0.196364, 0.227465, 0.154329, 0.119297, 0.054653, -0.149393, 0.083585, 0.225670, 0.020496, -0.062353, 0.168330, 0.053756, 0.157376, 0.082905, 0.092114, -0.182437, -0.049619, -0.013605 };
		test(indices,expected_result);
	}

	@Test
	public void test5() 
	{
		int[] indices = { 5256, 21, 993, 2476, 2, 32, 186, 3421, 14, 12, 141,4132, 8, 6155, 3778, 14, 20, 246, 167, 1210, 256, 48, 3 };
		double[] expected_result = { -0.199897, -0.081490, -0.095726, -0.018678, 0.202237, -0.101536, -0.042024, -0.211772, -0.208696, -0.166445, -0.158264, 0.204586, -0.117677, 0.017271, 0.118094, 0.176500, -0.206877, -0.072249, 0.208058, 0.055741, 0.044633, -0.012658, 0.135483, 0.207602, 0.158457, -0.162415, -0.003128, 0.005689, -0.014504, 0.178785, 0.165985, -0.172455, -0.207152, 0.212340, 0.161873, 0.120928, 0.058394, -0.165083, 0.090889, 0.209937, 0.005300, -0.040825, 0.188661, 0.072582, 0.164623, 0.103280, 0.114323, -0.203518, -0.053020, -0.014081, -0.186783, -0.078588, -0.095377, -0.016235, 0.179175, -0.075164, -0.058095, -0.197281, -0.182184, -0.140297, -0.131846, 0.188140, -0.107949, 0.013011, 0.079015, 0.172015, -0.174089, -0.052597, 0.187106, 0.048676, 0.055648, -0.014358, 0.117464, 0.201808, 0.145443, -0.149964, -0.007423, -0.001421, -0.013254, 0.152913, 0.137455, -0.168360, -0.197722, 0.223502, 0.146453, 0.117342, 0.042136, -0.152794, 0.091244, 0.223151, 0.000236, -0.061626, 0.167068, 0.050161, 0.133419, 0.085871, 0.108771, -0.187459, -0.040120, -0.022123 };
		test(indices,expected_result);
	}
}
